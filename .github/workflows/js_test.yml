name: Javascript testing

on:
  - push
  - pull_request

jobs:
  test:
    name: Run unit tests using Vue Test Utils
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Export node version
        id: node_version
        run: echo ::set-output name=NODE_VERSION::$(cat .nvmrc)
      - name: Setup node
        uses: actions/setup-node@v2
        with:
          node-version-file: '.nvmrc'
      - name: Node Information
        run: node --version
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/cache@v2
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Install dependencides
        run: >-
          npm ci --legacy-peer-deps
      - name: Run unit tests
        run: >-
          npm run test:unit
  cypress:
    name: Run Cypress tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Export node version
        id: node_version
        run: echo ::set-output name=NODE_VERSION::$(cat .nvmrc)
      - name: Setup node
        uses: actions/setup-node@v2
        with:
          node-version-file: '.nvmrc'
      - name: Node Information
        run: node --version
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/cache@v2
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}x
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Install dependencides
        run: >-
          npm ci  --legacy-peer-deps
      - name: Cypress run
        uses: cypress-io/github-action@v2
        with:
          start: npm run serve --legacy-peer-deps
          wait-on: http://localhost:8080/
          config-file: cypress.json
          spec: 'tests/e2e/**/*'
        env:
          CYPRESS_baseUrl: http://localhost:8080/
      # after the test run completes
      # store any screenshots
      # NOTE: screenshots will be generated only if E2E test failed
      # thus we store screenshots only on failures
      # Alternative: create and commit an empty cypress/screenshots folder
      # to always have something to upload
      - uses: actions/upload-artifact@v1
        if: failure()
        with:
          name: cypress-screenshots
          path: tests/e2e/screenshots
